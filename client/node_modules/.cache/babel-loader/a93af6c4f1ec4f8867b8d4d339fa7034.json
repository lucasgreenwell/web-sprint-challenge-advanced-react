{"ast":null,"code":"import { useState } from \"react\"; // set up state property\n// capture the values\n// if local data use that, else use initial data\n// update localStorage when needed\n// Don't forget to parse data from localStorage, and stringify new data getting stored\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    if (window.localStorage.getItem(key)) {\n      return JSON.parse(window.localStorage.getItem(key));\n    }\n\n    window.localStorage.setItem(key, JSON.stringify(initialValue));\n    return initialValue;\n  });\n\n  const setValue = value => {\n    setStoredValue(value);\n    window.localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, setValue];\n}; // should work almost exactly like useState - except any value that is controlled by this hook will be saved and persisted to localStorage","map":{"version":3,"sources":["/Users/lucasgreenwell/Projects/TLWeb30/web-sprint-challenge-advanced-react/client/src/hooks/useLocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","storedValue","setStoredValue","window","localStorage","getItem","JSON","parse","setItem","stringify","setValue","value"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,CAACC,GAAD,EAAMC,YAAN,KAAuB;AACpD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,MAAM;AACnD,QAAIM,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAAJ,EAAsC;AACpC,aAAOO,IAAI,CAACC,KAAL,CAAWJ,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAAX,CAAP;AACD;;AACDI,IAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BT,GAA5B,EAAiCO,IAAI,CAACG,SAAL,CAAeT,YAAf,CAAjC;AACA,WAAOA,YAAP;AACD,GAN6C,CAA9C;;AAQA,QAAMU,QAAQ,GAAGC,KAAK,IAAI;AACxBT,IAAAA,cAAc,CAACS,KAAD,CAAd;AACAR,IAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BT,GAA5B,EAAiCO,IAAI,CAACG,SAAL,CAAeE,KAAf,CAAjC;AACD,GAHD;;AAKA,SAAO,CAACV,WAAD,EAAcS,QAAd,CAAP;AACD,CAfM,C,CAiBP","sourcesContent":["import { useState } from \"react\";\n// set up state property\n// capture the values\n// if local data use that, else use initial data\n// update localStorage when needed\n// Don't forget to parse data from localStorage, and stringify new data getting stored\nexport const useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    if (window.localStorage.getItem(key)) {\n      return JSON.parse(window.localStorage.getItem(key));\n    }\n    window.localStorage.setItem(key, JSON.stringify(initialValue));\n    return initialValue;\n  });\n\n  const setValue = value => {\n    setStoredValue(value);\n    window.localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, setValue];\n};\n\n// should work almost exactly like useState - except any value that is controlled by this hook will be saved and persisted to localStorage\n"]},"metadata":{},"sourceType":"module"}